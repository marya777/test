<?php if(class_exists("WooCommerce")) {
    class ET_WC_Order 
    {
        protected $etOrder;
        protected $cancel_url = "";
        protected $received_url = "";

        public function __construct($order = '')
        {
            $this->prices_include_tax = get_option('woocommerce_prices_include_tax') == 'yes' ? true : false;
            $this->tax_display_cart = get_option('woocommerce_tax_display_cart');
            $this->display_totals_ex_tax = $this->tax_display_cart == 'excl' ? true : false;
            $this->display_cart_ex_tax = $this->tax_display_cart == 'excl' ? true : false;
            $this->init($order);
        }

        public function get_refunds()
        {
            return array();
        }

        public function get_total_refunded()
        {
            return 0;
        }

        protected function init($order)
        {
            if (is_numeric($order)) {
                $this->id = absint($order);
                $this->post = get_post($order);
                $this->get_order($this->id);
            } elseif ($order instanceof ET_WC_Order) {
                $this->id = absint($order->id);
                $this->ID = absint($order->id);
                $this->post = $order->post;
                $this->etOrder = $order;
                $this->populate($order->etOrder);
            } elseif ($order instanceof ET_AdOrder) {
                $payData = $order->generate_data_to_pay();
                $order->ID = $payData["ID"];
                $this->etOrder = $order;
                $this->populate($order);
                // Billing email cam default to user if set
                if (empty($this->billing_email) && !empty($this->customer_user)) {
                    $user = get_user_by('id', $this->customer_user);
                    $this->billing_email = $user->user_email;
                }
            } elseif ($order instanceof WP_Post || isset($order->ID)) {
                $this->id = absint($order->ID);
                $this->post = $order;
                $this->get_order($this->id);
            }
        }

        public function remove_order_items($type = null)
        {
            parent::remove_order_items($type); // TODO: Change the autogenerated stub
        }

        public function set_payment_method($payment_method)
        {
            parent::set_payment_method($payment_method); // TODO: Change the autogenerated stub
        }

        public function set_address($address, $type = 'billing')
        {
            parent::set_address($address, $type); // TODO: Change the autogenerated stub
        }

        public function add_product($product, $qty = 1, $args = array())
        {
            return parent::add_product($product, $qty, $args); // TODO: Change the autogenerated stub
        }

        public function update_product($item_id, $product, $args)
        {
            return parent::update_product($item_id, $product, $args); // TODO: Change the autogenerated stub
        }

        public function add_coupon($code, $discount_amount = 0)
        {
            return parent::add_coupon($code, $discount_amount); // TODO: Change the autogenerated stub
        }

        public function update_coupon($item_id, $args)
        {
            return parent::update_coupon($item_id, $args); // TODO: Change the autogenerated stub
        }

        public function add_tax($tax_rate_id, $tax_amount = 0, $shipping_tax_amount = 0)
        {
            return parent::add_tax($tax_rate_id, $tax_amount, $shipping_tax_amount); // TODO: Change the autogenerated stub
        }

        public function add_shipping($shipping_rate)
        {
            return parent::add_shipping($shipping_rate); // TODO: Change the autogenerated stub
        }

        public function update_shipping($item_id, $args)
        {
            return parent::update_shipping($item_id, $args); // TODO: Change the autogenerated stub
        }

        public function add_fee($fee)
        {
            return parent::add_fee($fee); // TODO: Change the autogenerated stub
        }

        public function update_fee($item_id, $args)
        {
            return parent::update_fee($item_id, $args); // TODO: Change the autogenerated stub
        }

        public function set_total($amount, $total_type = 'total')
        {
            return parent::set_total($amount, $total_type); // TODO: Change the autogenerated stub
        }

        public function calculate_taxes()
        {
            return parent::calculate_taxes(); // TODO: Change the autogenerated stub
        }

        public function calculate_shipping()
        {
            return parent::calculate_shipping(); // TODO: Change the autogenerated stub
        }

        public function update_taxes()
        {
            return parent::update_taxes(); // TODO: Change the autogenerated stub
        }

        public function calculate_totals($and_taxes = true)
        {
            return parent::calculate_totals($and_taxes); // TODO: Change the autogenerated stub
        }

        public function get_order($id = 0)
        {
            if (!$id) {
                return false;
            }
            $this->etOrder = new ET_AdOrder($id);
            if ($this->etOrder) {
                $payData = $this->etOrder->generate_data_to_pay();
                $this->etOrder->ID = $payData["ID"];
                $this->populate($this->etOrder);
                return true;
            }

            return false;
        }

        public function populate($result)
        {
            $orderData = $result->get_order_data();
            // Standard post data
            $this->id = $result->ID;
            $this->order_date = $orderData['created_date'];
            $this->modified_date = $orderData['created_date'];
            $this->customer_message = '';
            $this->customer_note = '';
            $this->post_status = $orderData['status'];
            // Billing email cam default to user if set
            if (empty($this->billing_email) && !empty($this->customer_user)) {
                $user = get_user_by('id', $this->customer_user);
                $this->billing_email = $user->user_email;
            }
            $this->cancel_url = et_get_page_link('process-payment', array('paymentType' => $orderData['payment']));
            $this->received_url = et_get_page_link('process-payment', array('paymentType' => $orderData['payment']));
        }

        public function get_status()
        {
            return parent::get_status(); // TODO: Change the autogenerated stub
        }

        public function has_status($status)
        {
            return parent::has_status($status); // TODO: Change the autogenerated stub
        }

        public function get_user_id()
        {
            return parent::get_user_id(); // TODO: Change the autogenerated stub
        }

        public function get_user()
        {
            return parent::get_user(); // TODO: Change the autogenerated stub
        }

        public function get_transaction_id()
        {
            return parent::get_transaction_id(); // TODO: Change the autogenerated stub
        }

        public function key_is_valid($key)
        {
            return parent::key_is_valid($key); // TODO: Change the autogenerated stub
        }

        public function get_order_number()
        {
            return $this->etOrder->ID;
        }

        public function get_formatted_billing_address()
        {
            return parent::get_formatted_billing_address(); // TODO: Change the autogenerated stub
        }

        public function get_billing_address()
        {
            return parent::get_billing_address(); // TODO: Change the autogenerated stub
        }

        public function get_formatted_shipping_address()
        {
            return parent::get_formatted_shipping_address(); // TODO: Change the autogenerated stub
        }

        public function get_shipping_address()
        {
            return "";
        }

        //get pack name here
        public function get_items($type = '')
        {
            if (empty($type)) {
                $type = array('line_item');
            }
            if (!is_array($type)) {
                $type = array($type);
            }
            $type = array_map('esc_attr', $type);
            $items = array();
            if (in_array('line_item', $type)) {
                $orderData = $this->etOrder->get_order_data();
                if (isset($orderData["products"])) {
                    $index = 0;
                    foreach ($orderData["products"] as $id => $product) {
                        $items[$index]['name'] = $product['NAME'];
                        $items[$index]['product_id'] = $product['ID'];
                        $items[$index]['type'] = "line_item";
                        $items[$index]['qty'] = $product['QTY'];
                        $items[$index]['tax_class'] = '';
                        $items[$index]['line_subtotal'] = $product['AMT'];
                        $items[$index]['line_subtotal_tax'] = '0';
                        $items[$index]['item_meta'] = array();
                        $index++;
                    }
                }
            }
            return $items;
        }

        public function get_item_count($type = '')
        {
            return parent::get_item_count($type); // TODO: Change the autogenerated stub
        }

        public function get_fees()
        {
            return parent::get_fees(); // TODO: Change the autogenerated stub
        }

        public function get_taxes()
        {
            return parent::get_taxes(); // TODO: Change the autogenerated stub
        }

        public function get_shipping_methods()
        {
            return parent::get_shipping_methods(); // TODO: Change the autogenerated stub
        }

        public function has_shipping_method($method_id)
        {
            return parent::has_shipping_method($method_id); // TODO: Change the autogenerated stub
        }

        public function get_tax_totals()
        {
            return parent::get_tax_totals(); // TODO: Change the autogenerated stub
        }

        public function has_meta($order_item_id)
        {
            return parent::has_meta($order_item_id); // TODO: Change the autogenerated stub
        }

        public function get_item_meta($order_item_id, $key = '', $single = false)
        {
            return parent::get_item_meta($order_item_id, $key, $single); // TODO: Change the autogenerated stub
        }

        public function get_cart_discount()
        {
            return parent::get_cart_discount(); // TODO: Change the autogenerated stub
        }

        public function get_order_discount()
        {
            return parent::get_order_discount(); // TODO: Change the autogenerated stub
        }

        public function get_total_discount()
        {
            return parent::get_total_discount(); // TODO: Change the autogenerated stub
        }

        public function get_cart_tax()
        {
            return parent::get_cart_tax(); // TODO: Change the autogenerated stub
        }

        public function get_shipping_tax()
        {
            return parent::get_shipping_tax(); // TODO: Change the autogenerated stub
        }

        public function get_total_tax()
        {
            return parent::get_total_tax(); // TODO: Change the autogenerated stub
        }

        public function get_total_shipping()
        {
            return parent::get_total_shipping(); // TODO: Change the autogenerated stub
        }

        public function get_total()
        {
            $orderData = $this->etOrder->get_order_data();
            $total = $orderData["total"];
            return $total;
        }

        public function get_subtotal()
        {
            return parent::get_subtotal(); // TODO: Change the autogenerated stub
        }

        public function get_item_subtotal($item, $inc_tax = false, $round = true)
        {
            return parent::get_item_subtotal($item, $inc_tax, $round); // TODO: Change the autogenerated stub
        }

        public function get_line_subtotal($item, $inc_tax = false, $round = true)
        {
            return parent::get_line_subtotal($item, $inc_tax, $round); // TODO: Change the autogenerated stub
        }

        public function get_item_total($item, $inc_tax = false, $round = true)
        {
            return parent::get_item_total($item, $inc_tax, $round); // TODO: Change the autogenerated stub
        }

        public function get_line_total($item, $inc_tax = false)
        {
            return parent::get_line_total($item, $inc_tax); // TODO: Change the autogenerated stub
        }

        public function get_item_tax($item, $round = true)
        {
            return parent::get_item_tax($item, $round); // TODO: Change the autogenerated stub
        }

        public function get_line_tax($item)
        {
            return parent::get_line_tax($item); // TODO: Change the autogenerated stub
        }

        public function get_shipping()
        {
            return parent::get_shipping(); // TODO: Change the autogenerated stub
        }

        public function get_order_total()
        {
            return parent::get_order_total(); // TODO: Change the autogenerated stub
        }

        public function get_shipping_method()
        {
            return parent::get_shipping_method(); // TODO: Change the autogenerated stub
        }

        public function get_formatted_line_subtotal($item, $tax_display = '')
        {
            return parent::get_formatted_line_subtotal($item, $tax_display); // TODO: Change the autogenerated stub
        }

        public function get_order_currency()
        {
            $orderData = $this->etOrder->get_order_data();
            return $orderData["currency"];
        }

        public function get_formatted_order_total()
        {
            return parent::get_formatted_order_total(); // TODO: Change the autogenerated stub
        }

        public function get_subtotal_to_display($compound = false, $tax_display = '')
        {
            return parent::get_subtotal_to_display($compound, $tax_display); // TODO: Change the autogenerated stub
        }

        public function get_shipping_to_display($tax_display = '')
        {
            return parent::get_shipping_to_display($tax_display); // TODO: Change the autogenerated stub
        }

        public function get_cart_discount_to_display()
        {
            return parent::get_cart_discount_to_display(); // TODO: Change the autogenerated stub
        }

        public function get_order_discount_to_display()
        {
            return parent::get_order_discount_to_display(); // TODO: Change the autogenerated stub
        }

        public function get_product_from_item($item)
        {
            if (!empty($item['product_id'])) {
                $_product = new ET_WC_Package($item['product_id']);
            } else {
                $_product = false;
            }
            return $_product;
        }

        public function get_order_item_totals($tax_display = '')
        {
            return parent::get_order_item_totals($tax_display); // TODO: Change the autogenerated stub
        }

        public function email_order_items_table($show_download_links = false, $show_sku = false, $show_purchase_note = false, $show_image = false, $image_size = array(32, 32), $plain_text = false)
        {
            return parent::email_order_items_table($show_download_links, $show_sku, $show_purchase_note, $show_image, $image_size, $plain_text); // TODO: Change the autogenerated stub
        }

        public function is_download_permitted()
        {
            return parent::is_download_permitted(); // TODO: Change the autogenerated stub
        }

        public function has_downloadable_item()
        {
            return parent::has_downloadable_item(); // TODO: Change the autogenerated stub
        }

        public function get_checkout_payment_url($on_checkout = false)
        {
            return parent::get_checkout_payment_url($on_checkout); // TODO: Change the autogenerated stub
        }

        public function get_checkout_order_received_url()
        {
            return $this->received_url;
        }

        public function set_checkout_order_received_url($received_url)
        {
            $this->received_url = $received_url;
        }

        public function get_cancel_order_url($redirect = '')
        {
            return $this->cancel_url;
        }

        public function set_cancel_order_url($cancel_url)
        {
            $this->cancel_url = $cancel_url;
        }

        public function get_view_order_url()
        {
            return parent::get_view_order_url(); // TODO: Change the autogenerated stub
        }

        public function get_downloadable_file_urls($product_id, $variation_id, $item)
        {
            return parent::get_downloadable_file_urls($product_id, $variation_id, $item); // TODO: Change the autogenerated stub
        }

        public function get_item_downloads($item)
        {
            return parent::get_item_downloads($item); // TODO: Change the autogenerated stub
        }

        public function get_download_url($product_id, $download_id)
        {
            return parent::get_download_url($product_id, $download_id); // TODO: Change the autogenerated stub
        }

        public function add_order_note($note, $is_customer_note = 0)
        {
            return parent::add_order_note($note, $is_customer_note); // TODO: Change the autogenerated stub
        }

        public function update_status($new_status, $note = '')
        {
            if (!$this->id) {
                return;
            }

            // Standardise status names.
            $new_status = 'wc-' === substr($new_status, 0, 3) ? substr($new_status, 3) : $new_status;
            $old_status = $this->get_status();
            switch (strtoupper($new_status)) {
                case 'COMPLETED':
                case 'PUBLISH':
                    $this->post_status = 'publish';
                    break;
                case 'PROCESSING' :
                case 'ON-HOLD':
                $this->post_status = 'pending';
                    break;
                case 'CANCELLED' :
                    $this->post_status = 'draft';
                    break;
                default:
                    $this->post_status = 'draft';
                    break;
            }
            $this->etOrder->post_status = $this->post_status;
            $log = new WC_Logger();
            $log->add('paypal', "Our Debug : " . $this->post_status);
            wp_update_post(array('ID' => $this->etOrder->ID, 'post_status' => $this->post_status));
        }

        public function cancel_order($note = '')
        {
            parent::cancel_order($note); // TODO: Change the autogenerated stub
        }

        public function payment_complete($transaction_id = '')
        {
            parent::payment_complete($transaction_id);
        }

        public function record_product_sales()
        {
            parent::record_product_sales();

        }

        public function get_used_coupons()
        {
            return parent::get_used_coupons(); // TODO: Change the autogenerated stub
        }

        public function increase_coupon_usage_counts()
        {
            return parent::increase_coupon_usage_counts(); // TODO: Change the autogenerated stub
        }

        public function decrease_coupon_usage_counts()
        {
            return parent::decrease_coupon_usage_counts(); // TODO: Change the autogenerated stub
        }

        public function reduce_order_stock()
        {
            return;
        }

        public function send_stock_notifications($product, $new_stock, $qty_ordered)
        {
            parent::send_stock_notifications($product, $new_stock, $qty_ordered); // TODO: Change the autogenerated stub
        }

        public function get_customer_order_notes()
        {
            return parent::get_customer_order_notes(); // TODO: Change the autogenerated stub
        }

        public function needs_payment()
        {
            return parent::needs_payment(); // TODO: Change the autogenerated stub
        }

        public function needs_shipping_address()
        {
            return false;
        }

        public function is_editable()
        {
            return parent::is_editable(); // TODO: Change the autogenerated stub
        }

        public function get_qty_refunded_for_item($item_id, $item_type = 'line_item')
        {
            $qty = 0;

            return $qty;
        }

        public function get_total_refunded_for_item($item_id, $item_type = 'line_item')
        {
            $total = 0;
            return $total * -1;
        }
    }
}